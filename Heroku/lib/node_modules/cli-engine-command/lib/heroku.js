'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.vars = exports.Vars = undefined;

var _http = require('./http');

var _http2 = _interopRequireDefault(_http);

var _url = require('url');

var _url2 = _interopRequireDefault(_url);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class Vars {
  constructor(env) {
    this.env = env;
  }

  get host() {
    return this.env.HEROKU_HOST || 'heroku.com';
  }
  get apiUrl() {
    return this.host.startsWith('http') ? this.host : `https://api.${this.host}`;
  }
  get apiHost() {
    if (this.host.startsWith('http')) {
      const u = _url2.default.parse(this.host);
      if (u.host) return u.host;
    }
    return `api.${this.host}`;
  }
  get gitHost() {
    if (this.env.HEROKU_GIT_HOST) return this.env.HEROKU_GIT_HOST;
    if (this.host.startsWith('http')) {
      const u = _url2.default.parse(this.host);
      if (u.host) return u.host;
    }
    return this.host;
  }
  get httpGitHost() {
    if (this.env.HEROKU_GIT_HOST) return this.env.HEROKU_GIT_HOST;
    if (this.host.startsWith('http')) {
      const u = _url2.default.parse(this.host);
      if (u.host) return u.host;
    }
    return `git.${this.host}`;
  }

  get gitPrefixes() {
    return [`git@${this.gitHost}:`, `ssh://git@${this.gitHost}/`, `https://${this.httpGitHost}/`];
  }
}

exports.Vars = Vars;
const vars = exports.vars = new Vars(process.env);

class Heroku extends _http2.default {
  constructor(output, options = {}) {
    super(output);
    if (options.required === undefined) options.required = true;
    this.options = options;
    this.requestOptions.host = 'api.heroku.com';
    this.requestOptions.protocol = 'https:';
    if (this.auth) this.requestOptions.headers['authorization'] = `:${this.auth}`;
    this.requestOptions.headers['user-agent'] = `heroku-cli/${this.out.config.version}`;
    this.requestOptions.headers['accept'] = 'application/vnd.heroku+json; version=3';
  }

  get auth() {
    let auth = process.env.HEROKU_API_KEY;
    if (!auth) {
      const Netrc = require('netrc-parser');
      const netrc = new Netrc();
      auth = netrc.machines[vars.apiHost].password;
    }
    // TODO: handle required
    return auth;
  }
}
exports.default = Heroku;